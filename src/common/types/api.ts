/* tslint:disable */
/* eslint-disable */
/**
 * Virki API
 * REST API for the Virki 2FA service.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'name': string;
    /**
     * 
     * @type {Plan}
     * @memberof Account
     */
    'plan': Plan;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'created': string;
}


/**
 * 
 * @export
 * @interface AccountPreloginPost200Response
 */
export interface AccountPreloginPost200Response {
    /**
     * 
     * @type {string}
     * @memberof AccountPreloginPost200Response
     */
    'salt': string;
    /**
     * 
     * @type {number}
     * @memberof AccountPreloginPost200Response
     */
    'opsLimit': number;
    /**
     * 
     * @type {number}
     * @memberof AccountPreloginPost200Response
     */
    'memLimit': number;
}
/**
 * 
 * @export
 * @interface AccountPreloginPostRequest
 */
export interface AccountPreloginPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountPreloginPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AccountPreloginPostRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface AccountRegisterPost200Response
 */
export interface AccountRegisterPost200Response {
    /**
     * 
     * @type {string}
     * @memberof AccountRegisterPost200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AccountRegisterPost200Response
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AccountRegisterPost200Response
     */
    'name': string;
    /**
     * 
     * @type {Plan}
     * @memberof AccountRegisterPost200Response
     */
    'plan': Plan;
    /**
     * 
     * @type {string}
     * @memberof AccountRegisterPost200Response
     */
    'created': string;
    /**
     * 
     * @type {EncryptedKeysKek}
     * @memberof AccountRegisterPost200Response
     */
    'kek': EncryptedKeysKek;
    /**
     * 
     * @type {EncryptedKeysKeypair}
     * @memberof AccountRegisterPost200Response
     */
    'keypair': EncryptedKeysKeypair;
    /**
     * 
     * @type {EncryptedKeysRecovery}
     * @memberof AccountRegisterPost200Response
     */
    'recovery': EncryptedKeysRecovery;
    /**
     * 
     * @type {string}
     * @memberof AccountRegisterPost200Response
     */
    'masterEncryptionKey': string;
    /**
     * 
     * @type {string}
     * @memberof AccountRegisterPost200Response
     */
    'sessionToken': string;
}


/**
 * 
 * @export
 * @interface AccountRegisterPost200ResponseAllOf
 */
export interface AccountRegisterPost200ResponseAllOf {
    /**
     * 
     * @type {string}
     * @memberof AccountRegisterPost200ResponseAllOf
     */
    'sessionToken': string;
}
/**
 * 
 * @export
 * @interface AccountRegisterPostRequest
 */
export interface AccountRegisterPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountRegisterPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AccountRegisterPostRequest
     */
    'name': string;
    /**
     * 
     * @type {EncryptedKeys}
     * @memberof AccountRegisterPostRequest
     */
    'encryptedKeys': EncryptedKeys;
}
/**
 * 
 * @export
 * @interface AccountRegisterPostRequestAllOf
 */
export interface AccountRegisterPostRequestAllOf {
    /**
     * 
     * @type {string}
     * @memberof AccountRegisterPostRequestAllOf
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AccountRegisterPostRequestAllOf
     */
    'name': string;
    /**
     * 
     * @type {EncryptedKeys}
     * @memberof AccountRegisterPostRequestAllOf
     */
    'encryptedKeys': EncryptedKeys;
}
/**
 * 
 * @export
 * @interface EncryptedKeys
 */
export interface EncryptedKeys {
    /**
     * 
     * @type {EncryptedKeysKek}
     * @memberof EncryptedKeys
     */
    'kek': EncryptedKeysKek;
    /**
     * 
     * @type {EncryptedKeysKeypair}
     * @memberof EncryptedKeys
     */
    'keypair': EncryptedKeysKeypair;
    /**
     * 
     * @type {EncryptedKeysRecovery}
     * @memberof EncryptedKeys
     */
    'recovery': EncryptedKeysRecovery;
    /**
     * 
     * @type {string}
     * @memberof EncryptedKeys
     */
    'masterEncryptionKey': string;
}
/**
 * 
 * @export
 * @interface EncryptedKeysKek
 */
export interface EncryptedKeysKek {
    /**
     * 
     * @type {string}
     * @memberof EncryptedKeysKek
     */
    'hash': string;
    /**
     * 
     * @type {string}
     * @memberof EncryptedKeysKek
     */
    'salt': string;
    /**
     * 
     * @type {number}
     * @memberof EncryptedKeysKek
     */
    'opsLimit': number;
    /**
     * 
     * @type {number}
     * @memberof EncryptedKeysKek
     */
    'memLimit': number;
}
/**
 * 
 * @export
 * @interface EncryptedKeysKeypair
 */
export interface EncryptedKeysKeypair {
    /**
     * 
     * @type {string}
     * @memberof EncryptedKeysKeypair
     */
    'publicKey': string;
    /**
     * 
     * @type {string}
     * @memberof EncryptedKeysKeypair
     */
    'privateKey': string;
}
/**
 * 
 * @export
 * @interface EncryptedKeysRecovery
 */
export interface EncryptedKeysRecovery {
    /**
     * 
     * @type {string}
     * @memberof EncryptedKeysRecovery
     */
    'masterKeyEncryptedWithRecoveryKey': string;
    /**
     * 
     * @type {string}
     * @memberof EncryptedKeysRecovery
     */
    'recoveryKeyEncryptedWithMasterKey': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Plan = {
    Free: 'free',
    Premium: 'premium'
} as const;

export type Plan = typeof Plan[keyof typeof Plan];


/**
 * 
 * @export
 * @interface Session
 */
export interface Session {
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    'created': string;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    'lastUsed': string;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    'ipAddress': string;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    'device': string;
    /**
     * 
     * @type {boolean}
     * @memberof Session
     */
    'currentDevice': boolean;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    'operatingSystem': string;
}
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'vaultId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'icon'?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'uriString'?: string;
    /**
     * 
     * @type {TokenType}
     * @memberof Token
     */
    'type'?: TokenType;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'label'?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'secret'?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'issuer'?: string;
    /**
     * 
     * @type {TokenAlgorithm}
     * @memberof Token
     */
    'algorithm'?: TokenAlgorithm;
    /**
     * 
     * @type {number}
     * @memberof Token
     */
    'digits'?: number;
    /**
     * 
     * @type {number}
     * @memberof Token
     */
    'counter'?: number;
    /**
     * 
     * @type {TokenPeriod}
     * @memberof Token
     */
    'period'?: TokenPeriod;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const TokenAlgorithm = {
    Sha1: 'sha1',
    Sha256: 'sha256',
    Sha512: 'sha512'
} as const;

export type TokenAlgorithm = typeof TokenAlgorithm[keyof typeof TokenAlgorithm];


/**
 * 
 * @export
 * @enum {string}
 */

export const TokenPeriod = {
    NUMBER_15: 15,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;

export type TokenPeriod = typeof TokenPeriod[keyof typeof TokenPeriod];


/**
 * 
 * @export
 * @enum {string}
 */

export const TokenType = {
    Totp: 'totp',
    Hotp: 'hotp',
    Steam: 'steam'
} as const;

export type TokenType = typeof TokenType[keyof typeof TokenType];


/**
 * 
 * @export
 * @interface Vault
 */
export interface Vault {
    /**
     * 
     * @type {string}
     * @memberof Vault
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Vault
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof Vault
     */
    'encryptionKey': string;
    /**
     * 
     * @type {string}
     * @memberof Vault
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Vault
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Vault
     */
    'icon'?: string;
    /**
     * 
     * @type {string}
     * @memberof Vault
     */
    'created': string;
    /**
     * 
     * @type {string}
     * @memberof Vault
     */
    'modified': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AccountPreloginPostRequest} accountPreloginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLoginPost: async (accountPreloginPostRequest: AccountPreloginPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountPreloginPostRequest' is not null or undefined
            assertParamExists('accountLoginPost', 'accountPreloginPostRequest', accountPreloginPostRequest)
            const localVarPath = `/account/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountPreloginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AccountPreloginPostRequest} accountPreloginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountPreloginPost: async (accountPreloginPostRequest: AccountPreloginPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountPreloginPostRequest' is not null or undefined
            assertParamExists('accountPreloginPost', 'accountPreloginPostRequest', accountPreloginPostRequest)
            const localVarPath = `/account/prelogin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountPreloginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AccountRegisterPostRequest} accountRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountRegisterPost: async (accountRegisterPostRequest: AccountRegisterPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountRegisterPostRequest' is not null or undefined
            assertParamExists('accountRegisterPost', 'accountRegisterPostRequest', accountRegisterPostRequest)
            const localVarPath = `/account/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountRegisterPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AccountPreloginPostRequest} accountPreloginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoginPost(accountPreloginPostRequest: AccountPreloginPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountRegisterPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountLoginPost(accountPreloginPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AccountPreloginPostRequest} accountPreloginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountPreloginPost(accountPreloginPostRequest: AccountPreloginPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountPreloginPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountPreloginPost(accountPreloginPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AccountRegisterPostRequest} accountRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountRegisterPost(accountRegisterPostRequest: AccountRegisterPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountRegisterPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountRegisterPost(accountRegisterPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {AccountPreloginPostRequest} accountPreloginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLoginPost(accountPreloginPostRequest: AccountPreloginPostRequest, options?: any): AxiosPromise<AccountRegisterPost200Response> {
            return localVarFp.accountLoginPost(accountPreloginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountPreloginPostRequest} accountPreloginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountPreloginPost(accountPreloginPostRequest: AccountPreloginPostRequest, options?: any): AxiosPromise<AccountPreloginPost200Response> {
            return localVarFp.accountPreloginPost(accountPreloginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountRegisterPostRequest} accountRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountRegisterPost(accountRegisterPostRequest: AccountRegisterPostRequest, options?: any): AxiosPromise<AccountRegisterPost200Response> {
            return localVarFp.accountRegisterPost(accountRegisterPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {AccountPreloginPostRequest} accountPreloginPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountLoginPost(accountPreloginPostRequest: AccountPreloginPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).accountLoginPost(accountPreloginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountPreloginPostRequest} accountPreloginPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountPreloginPost(accountPreloginPostRequest: AccountPreloginPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).accountPreloginPost(accountPreloginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountRegisterPostRequest} accountRegisterPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountRegisterPost(accountRegisterPostRequest: AccountRegisterPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).accountRegisterPost(accountRegisterPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


