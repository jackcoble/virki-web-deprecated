/* tslint:disable */
/* eslint-disable */
/**
 * Virki API
 * REST API for the Virki 2FA service.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Vault
 */
export interface Vault {
    /**
     * 
     * @type {any}
     * @memberof Vault
     */
    id: any | null;
    /**
     * 
     * @type {any}
     * @memberof Vault
     */
    userId: any | null;
    /**
     * 
     * @type {any}
     * @memberof Vault
     */
    encryptionKey: any | null;
    /**
     * 
     * @type {any}
     * @memberof Vault
     */
    name: any | null;
    /**
     * 
     * @type {any}
     * @memberof Vault
     */
    description?: any | null;
    /**
     * 
     * @type {any}
     * @memberof Vault
     */
    icon?: any | null;
    /**
     * 
     * @type {any}
     * @memberof Vault
     */
    created: any | null;
    /**
     * 
     * @type {any}
     * @memberof Vault
     */
    modified: any | null;
}

/**
 * Check if a given object implements the Vault interface.
 */
export function instanceOfVault(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "encryptionKey" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "created" in value;
    isInstance = isInstance && "modified" in value;

    return isInstance;
}

export function VaultFromJSON(json: any): Vault {
    return VaultFromJSONTyped(json, false);
}

export function VaultFromJSONTyped(json: any, ignoreDiscriminator: boolean): Vault {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'userId': json['userId'],
        'encryptionKey': json['encryptionKey'],
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'icon': !exists(json, 'icon') ? undefined : json['icon'],
        'created': json['created'],
        'modified': json['modified'],
    };
}

export function VaultToJSON(value?: Vault | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'userId': value.userId,
        'encryptionKey': value.encryptionKey,
        'name': value.name,
        'description': value.description,
        'icon': value.icon,
        'created': value.created,
        'modified': value.modified,
    };
}

