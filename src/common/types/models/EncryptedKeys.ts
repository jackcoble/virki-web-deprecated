/* tslint:disable */
/* eslint-disable */
/**
 * Virki API
 * REST API for the Virki 2FA service.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EncryptedKeysKek } from './EncryptedKeysKek';
import {
    EncryptedKeysKekFromJSON,
    EncryptedKeysKekFromJSONTyped,
    EncryptedKeysKekToJSON,
} from './EncryptedKeysKek';
import type { EncryptedKeysKeypair } from './EncryptedKeysKeypair';
import {
    EncryptedKeysKeypairFromJSON,
    EncryptedKeysKeypairFromJSONTyped,
    EncryptedKeysKeypairToJSON,
} from './EncryptedKeysKeypair';
import type { EncryptedKeysRecovery } from './EncryptedKeysRecovery';
import {
    EncryptedKeysRecoveryFromJSON,
    EncryptedKeysRecoveryFromJSONTyped,
    EncryptedKeysRecoveryToJSON,
} from './EncryptedKeysRecovery';

/**
 * 
 * @export
 * @interface EncryptedKeys
 */
export interface EncryptedKeys {
    /**
     * 
     * @type {EncryptedKeysKek}
     * @memberof EncryptedKeys
     */
    kek: EncryptedKeysKek;
    /**
     * 
     * @type {EncryptedKeysKeypair}
     * @memberof EncryptedKeys
     */
    keypair: EncryptedKeysKeypair;
    /**
     * 
     * @type {EncryptedKeysRecovery}
     * @memberof EncryptedKeys
     */
    recovery: EncryptedKeysRecovery;
    /**
     * 
     * @type {any}
     * @memberof EncryptedKeys
     */
    masterEncryptionKey: any | null;
}

/**
 * Check if a given object implements the EncryptedKeys interface.
 */
export function instanceOfEncryptedKeys(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "kek" in value;
    isInstance = isInstance && "keypair" in value;
    isInstance = isInstance && "recovery" in value;
    isInstance = isInstance && "masterEncryptionKey" in value;

    return isInstance;
}

export function EncryptedKeysFromJSON(json: any): EncryptedKeys {
    return EncryptedKeysFromJSONTyped(json, false);
}

export function EncryptedKeysFromJSONTyped(json: any, ignoreDiscriminator: boolean): EncryptedKeys {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'kek': EncryptedKeysKekFromJSON(json['kek']),
        'keypair': EncryptedKeysKeypairFromJSON(json['keypair']),
        'recovery': EncryptedKeysRecoveryFromJSON(json['recovery']),
        'masterEncryptionKey': json['masterEncryptionKey'],
    };
}

export function EncryptedKeysToJSON(value?: EncryptedKeys | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'kek': EncryptedKeysKekToJSON(value.kek),
        'keypair': EncryptedKeysKeypairToJSON(value.keypair),
        'recovery': EncryptedKeysRecoveryToJSON(value.recovery),
        'masterEncryptionKey': value.masterEncryptionKey,
    };
}

